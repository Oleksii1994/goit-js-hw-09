{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAEtCF,EAAOG,iBAAiB,UAAUC,IAChCA,EAAMC,iBAEN,MAAMC,EAAaC,OAAOP,EAAOQ,MAAMC,OACjCC,EAAYH,OAAOP,EAAOW,KAAKF,OAC/BG,EAAcL,OAAOP,EAAOa,OAAOJ,OAEzC,SAASK,EAAcC,EAAUP,GAC/B,OAAO,IAAIQ,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUP,IAEpBU,EAAO,C,SAAEH,E,MAAUP,GAAQ,GAE5BA,EAAM,G,CAIb,IAAK,IAAIe,EAAI,EAAGA,EAAIX,EAAaW,IAAK,CAIpCT,EAHiBS,EAAI,EACAjB,EAAaiB,EAAIb,GAGnCc,MAAK,EAACT,SAAEA,EAAQP,MAAEA,MACjBV,EAAA2B,OAAOC,QAAQ,uBAAqBX,QAAiBP,MAAU,IAEhEmB,OAAM,EAACZ,SAAEA,EAAQP,MAAEA,MAClBV,EAAA2B,OAAOG,QAAQ,sBAAoBb,QAAiBP,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const delayValue = Number(formEl.delay.value);\n  const stepValue = Number(formEl.step.value);\n  const amountValue = Number(formEl.amount.value);\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n\n  for (let i = 0; i < amountValue; i++) {\n    const position = i + 1;\n    const promiseDelay = delayValue + i * stepValue;\n\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\n// createPromise(refs.amountInput.value, refs.delayInput.value).then(\n//   ({ position, delay }) => {\n//     // counterPosition();\n//     // position = 0;\n//     position += 1;\n//     delay = refs.delayInput.value;\n//     delay += refs.stepInput.value;\n\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   }\n// );\n//   .catch(({ position, delay }) => {\n//     // position = 0;\n//     // position += 1;\n//     // delay = refs.delayInput.value;\n//     // delay += refs.stepInput.value;\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// function counterPosition() {\n//   let position = 0;\n//   return (position += 1);\n// }\n\n// const form = document.querySelector('.form');\n// form.addEventListener('submit', event => {\n//   event.preventDefault(); // перешкоджає формі відправити дані на сервер\n\n//   // отримуємо значення з полів форми\n//   const delay = Number(form.delay.value);\n//   const step = Number(form.step.value);\n//   const amount = Number(form.amount.value);\n\n//   // функція для створення промісу з вказаною затримкою\n//   function createPromise(position, delay) {\n//     return new Promise((resolve, reject) => {\n//       const shouldResolve = Math.random() > 0.3;\n//       setTimeout(() => {\n//         if (shouldResolve) {\n//           resolve({ position, delay });\n//         } else {\n//           reject({ position, delay });\n//         }\n//       }, delay);\n//     });\n//   }\n\n//   // створюємо вказану кількість промісів\n//   for (let i = 0; i < amount; i++) {\n//     const position = i + 1;\n//     const promiseDelay = delay + i * step; // збільшуємо затримку для кожного наступного промісу\n//     createPromise(position, promiseDelay)\n//       .then(({ position, delay }) => {\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// });\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","addEventListener","event","preventDefault","delayValue","Number","delay","value","stepValue","step","amountValue","amount","createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.64da07f5.js.map"}